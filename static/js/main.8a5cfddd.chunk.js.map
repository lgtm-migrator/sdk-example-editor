{"version":3,"sources":["utils/utils.js","redux/selectors/index.js","redux/ducks/index.js","redux/store.js","components/InputContainer.js","components/ExportContainer.js","components/LanguageContainer.js","components/ExampleCode.js","components/ExamplesContainer.js","components/File.js","components/FileList.js","components/App.js","serviceWorker.js","index.js"],"names":["languageToExtension","java","node","python","ruby","go","swift","dotnet","php","convertToDisplayString","json","map","line","replace","join","getSelectedSwagger","state","byId","selectedId","getIsJson","split","pop","getIsSwagger","createSelector","swagger","info","getLanguages","languages","Object","entries","paths","forEach","pathInfo","methodInfo","Array","isArray","examples","union","keys","sort","getEndpointExamples","selectedLanguage","isSwagger","endpointExamples","path","method","sdkExamples","language","example","exampleName","codeArray","push","name","code","length","endpoint","operationId","summary","filesSlice","createSlice","initialState","allIds","reducers","loadFiles","action","payload","content","JSON","parse","yaml","safeLoad","updateExample","index","newCodeExample","operationMethod","requestExamples","languageExamples","type","source","displayString","displayStringArray","convertToJSON","addLanguage","selectFile","id","selectLanguage","actions","reducer","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","persistStore","readFileContent","file","fileReader","FileReader","Promise","resolve","reject","onload","event","target","result","onerror","error","readAsText","InputContainer","dispatch","useDispatch","onDrop","useCallback","acceptedFiles","a","files","console","useDropzone","getRootProps","getInputProps","isDragActive","className","ExportContainer","useSelector","isJson","shallowEqual","buildOutputFile","zip","JSZip","Blob","stringify","safeDump","exampleFolder","folder","languageExample","langaugeFolder","jsonArray","generateAsync","then","blob","FileSaver","saveAs","Button","onClick","LanguageContainer","useState","isModalOpen","setIsModalOpen","setLanguage","onNewLanguage","trim","handleLanguageSelection","selectedItem","Dropdown","ariaLabel","direction","helperText","invalidText","items","label","onChange","Link","disabled","href","Modal","hasForm","iconDescription","modalAriaLabel","modalHeading","modalLabel","primaryButtonDisabled","includes","onRequestSubmit","onSecondarySubmit","open","primaryButtonText","secondaryButtonText","selectorPrimaryFocus","TextInput","labelText","invalid","e","value","placeholder","ExampleCode","onCodeChange","_language","TextArea","hideLabel","cols","rows","style","solarizedDark","defaultProps","React","memo","prev","next","ExamplesContainer","codeExample","Accordion","AccordionItem","title","File","FileList","handleFileSelection","App","aria-label","prefix","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8a5cfddd.chunk.js","sourcesContent":["export const languageToExtension = {\n  java: '.java',\n  node: '.js',\n  python: '.py',\n  ruby: '.rb',\n  go: '.go',\n  swift: '.swift',\n  dotnet: '.cs',\n  'c#': '.cs',\n  php: '.php',\n  'dotnet-standard': '.cs',\n};\n\n/**\n * Converts code example String displayed in the UI to a JSON array\n * to be manipulated internally.\n *\n * @param {String} displayString the String representing the code\n * example in the UI\n */\nexport const convertToJSON = (displayString) => {\n  const displayStringArray = displayString.split('\\n');\n  return displayStringArray.map((line, index) => {\n    if (index === displayStringArray.length - 1) {\n      return line;\n    }\n    return `${line}\\n`;\n  });\n};\n\n/**\n * Converts JSON representation of code example to a String to be\n * displayed in the UI.\n *\n * @param {Object} json JSON array of the lines of the code example\n */\nexport const convertToDisplayString = (json) => {\n  return json\n    .map((line) => line.replace('\\n', '').replace('\\\\\\\\', '\\\\'))\n    .join('\\n');\n};\n","import { createSelector } from 'reselect';\nimport union from 'lodash.union';\n\nconst getSelectedLanguage = (state) => state.selectedLanguage;\nconst getSelectedSwagger = (state) => state.byId[state.selectedId];\n\nexport const getIsJson = (state) =>\n  state.selectedId && state.selectedId.split('.').pop() === 'json';\n\nexport const getIsSwagger = createSelector([getSelectedSwagger], (swagger) => {\n  return !!swagger?.info;\n});\n\nexport const getLanguages = createSelector([getSelectedSwagger], (swagger) => {\n  let languages = swagger?.info?.['x-sdk-supported-languages'] ?? [];\n  Object.entries(swagger.paths).forEach(([path, pathInfo]) => {\n    Object.entries(pathInfo).forEach(([method, methodInfo]) => {\n      // this is something we don't want, like a parameters array\n      if (Array.isArray(methodInfo)) {\n        return;\n      }\n      const examples = methodInfo?.['x-sdk-operations']?.['request-examples'];\n      if (!examples) {\n        return;\n      }\n\n      languages = union(languages, Object.keys(examples));\n    });\n  });\n  languages = languages.sort();\n  return languages;\n});\n\nexport const getEndpointExamples = createSelector(\n  [getSelectedSwagger, getSelectedLanguage, getIsSwagger],\n  (swagger, selectedLanguage, isSwagger) => {\n    const endpointExamples = [];\n\n    Object.entries(swagger.paths).forEach(([path, pathInfo]) => {\n      Object.entries(pathInfo).forEach(([method, methodInfo]) => {\n        // this is something we don't want, like a parameters array\n        if (Array.isArray(methodInfo)) {\n          return;\n        }\n\n        const sdkExamples = methodInfo['x-sdk-operations'];\n        let examples = [];\n\n        const language = isSwagger\n          ? selectedLanguage\n          : Object.keys(sdkExamples['request-examples'])[0];\n\n        if (sdkExamples?.['request-examples']?.[language]) {\n          sdkExamples['request-examples'][language].forEach((example) => {\n            if (!example.example) {\n              return;\n            }\n            const exampleName = example['name'];\n            const codeArray = example['example'][0]['source'];\n\n            examples.push({\n              name: exampleName,\n              code: codeArray,\n            });\n          });\n        }\n\n        // show blank example for user to add a new one in the\n        // case there's nothing there\n        if (examples.length === 0) {\n          examples.push({\n            name: 'none',\n            code: [],\n          });\n        }\n\n        const endpoint = {\n          path,\n          method,\n          operationId: methodInfo.operationId,\n          summary: methodInfo.summary,\n          examples,\n        };\n        endpointExamples.push(endpoint);\n      });\n    });\n    return endpointExamples;\n  }\n);\n","import { createSlice } from '@reduxjs/toolkit';\nimport yaml from 'js-yaml';\n\nimport { convertToJSON } from '../../utils/utils';\nimport { getLanguages } from '../selectors';\n\nconst loadFilesReducer = (state, action) => {\n  const files = action.payload;\n  files.forEach(({ name, content }) => {\n    const isJson = name.split('.').pop() === 'json';\n    let swagger;\n\n    if (isJson) {\n      swagger = JSON.parse(content);\n    } else {\n      swagger = yaml.safeLoad(content);\n    }\n\n    state.byId[name] = swagger;\n    state.allIds = Object.keys(state.byId).sort();\n    state.selectedId = name;\n  });\n  const languages = getLanguages(state);\n  state.selectedLanguage = languages[0] ?? null;\n};\n\nconst updateExampleReducer = (state, action) => {\n  const swagger = state.byId[state.selectedId];\n\n  if (!swagger) {\n    return;\n  }\n\n  const { path, method, language, index, newCodeExample } = action.payload;\n\n  let operationMethod = swagger.paths[path][method];\n  // add surrounding JSON if necessary\n  if (!operationMethod['x-sdk-operations']) {\n    operationMethod = {\n      ...operationMethod,\n      'x-sdk-operations': {\n        'request-examples': {},\n      },\n    };\n  }\n  swagger.paths[path][method] = operationMethod;\n\n  let requestExamples = operationMethod['x-sdk-operations']['request-examples'];\n\n  // no example is defined for this language, so we need to add some surrounding JSON first\n  if (!requestExamples[language]) {\n    requestExamples = {\n      ...requestExamples,\n      [language]: [],\n    };\n  }\n  let languageExamples = requestExamples[language];\n\n  // another case of a new example, so we have to do a similar thing to above\n  if (languageExamples.length === 0) {\n    languageExamples.push({\n      name: 'Example request',\n      example: [\n        {\n          type: 'code',\n          source: [],\n        },\n      ],\n    });\n  }\n\n  languageExamples[index]['example'][0]['source'] = convertToJSON(\n    newCodeExample\n  );\n  swagger.paths[path][method]['x-sdk-operations']['request-examples'][\n    language\n  ] = languageExamples;\n};\n\nconst addLanguageReducer = (state, action) => {\n  const language = action.payload;\n  const swagger = state.byId[state.selectedId];\n\n  if (!swagger) {\n    return;\n  }\n\n  const languages = swagger.info['x-sdk-supported-languages'] ?? [];\n\n  if (language !== 'curl') {\n    languages.push(language);\n  }\n  swagger.info['x-sdk-supported-languages'] = languages;\n};\n\nconst filesSlice = createSlice({\n  name: 'files',\n  initialState: {\n    byId: {},\n    allIds: [],\n    selectedId: null,\n    selectedLanguage: null,\n  },\n  reducers: {\n    loadFiles: loadFilesReducer,\n    updateExample: updateExampleReducer,\n    addLanguage: addLanguageReducer,\n    selectFile: (state, action) => {\n      const id = action.payload;\n      state.selectedId = id;\n\n      const languages = getLanguages(state);\n      state.selectedLanguage = languages[0] ?? null;\n    },\n    selectLanguage: (state, action) => {\n      state.selectedLanguage = action.payload;\n    },\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer } = filesSlice;\n// Extract and export each action creator by name\nexport const {\n  loadFiles,\n  selectFile,\n  selectLanguage,\n  updateExample,\n  addLanguage,\n} = actions;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { persistStore, persistReducer } from 'redux-persist';\n\nimport reducer from './ducks';\n\nconst persistConfig = {\n  key: 'sdk-examples',\n  storage,\n};\n\n// Middleware: Redux Persist Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [\n    ...getDefaultMiddleware({\n      immutableCheck: false,\n      serializableCheck: false,\n    }),\n  ],\n});\n\npersistStore(store);\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\n\nimport { loadFiles } from '../redux/ducks';\n\nimport './InputContainer.scss';\n\nconst readFileContent = (file) => {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onload = (event) => resolve(event.target.result);\n    fileReader.onerror = (error) => reject(error);\n    fileReader.readAsText(file);\n  });\n};\n\nexport default function InputContainer() {\n  const dispatch = useDispatch();\n\n  const onDrop = useCallback(\n    async (acceptedFiles) => {\n      const files = [];\n      for (const file of acceptedFiles) {\n        try {\n          const content = await readFileContent(file);\n          files.push({ name: file.name, content });\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      dispatch(loadFiles(files));\n    },\n    [dispatch]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <section className=\"file-input\">\n      <div className=\"file-input__dropbox\" {...getRootProps()}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drag the file here.</p>\n        ) : (\n          <p>\n            Drag an OpenAPI file or an extracted example file here, or click to\n            select.\n          </p>\n        )}\n      </div>\n    </section>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { Button } from 'carbon-components-react';\nimport FileSaver from 'file-saver';\nimport JSZip from 'jszip';\nimport yaml from 'js-yaml';\n\nimport { getIsJson } from '../redux/selectors';\n\nimport { convertToDisplayString, languageToExtension } from '../utils/utils';\n\nexport default function ExportContainer() {\n  const { swagger, selectedId, isJson } = useSelector(\n    (state) => ({\n      swagger: state.byId[state.selectedId],\n      selectedId: state.selectedId,\n      isJson: getIsJson(state),\n    }),\n    shallowEqual\n  );\n\n  const buildOutputFile = useCallback(() => {\n    const zip = new JSZip();\n\n    if (isJson) {\n      zip.file(\n        selectedId,\n        new Blob([JSON.stringify(swagger, null, 2)], {\n          type: 'application/json',\n        })\n      );\n    } else {\n      zip.file(\n        selectedId,\n        new Blob([yaml.safeDump(swagger)], {\n          type: 'application/x-yaml',\n        })\n      );\n    }\n\n    const exampleFolder = zip.folder('examples');\n    Object.entries(swagger.paths).forEach(([_, pathInfo]) => {\n      Object.entries(pathInfo).forEach(([_, methodInfo]) => {\n        // this is something we don't want, like a parameters array\n        if (Array.isArray(methodInfo)) {\n          return;\n        }\n\n        const sdkExamples = methodInfo['x-sdk-operations'];\n        if (sdkExamples && sdkExamples['request-examples']) {\n          // create sub-folders for examples in each language\n          Object.entries(sdkExamples['request-examples']).forEach(\n            ([language, languageExample]) => {\n              if (language === 'curl') {\n                return;\n              }\n              const langaugeFolder = exampleFolder.folder(language);\n\n              languageExample.forEach((example, index) => {\n                // ignore other examples types like markdown\n                if (!example.example) {\n                  return;\n                }\n                let jsonArray = example['example'][0]['source'];\n                // handle cases where some examples are nested for whatever reason\n                while (Array.isArray(jsonArray[0])) {\n                  jsonArray = jsonArray[0];\n                }\n                langaugeFolder.file(\n                  `${methodInfo.operationId}${index > 0 ? index : ''}${\n                    languageToExtension[language]\n                  }`,\n                  new Blob([convertToDisplayString(jsonArray)])\n                );\n              });\n            }\n          );\n        }\n      });\n    });\n\n    zip\n      .generateAsync({ type: 'blob' })\n      .then((blob) => FileSaver.saveAs(blob, `${selectedId}.zip`));\n  }, [isJson, selectedId, swagger]);\n\n  return (\n    <div>\n      <Button className=\"button\" onClick={buildOutputFile} type=\"submit\">\n        Download\n      </Button>\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Modal, TextInput, Dropdown } from 'carbon-components-react';\n\nimport { getLanguages, getIsSwagger } from '../redux/selectors';\nimport { selectLanguage } from '../redux/ducks';\n\nimport { addLanguage } from '../redux/ducks';\n\nimport './LanguageContainer.scss';\n\nexport default function LanguageContainer() {\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [language, setLanguage] = useState('');\n\n  const { languages, selectedLanguage, isSwagger } = useSelector(\n    (state) => ({\n      languages: getLanguages(state),\n      selectedLanguage: state.selectedLanguage,\n      isSwagger: getIsSwagger(state),\n    }),\n    shallowEqual\n  );\n  const onNewLanguage = useCallback(() => {\n    setIsModalOpen(false);\n    dispatch(addLanguage(language.trim()));\n  }, [dispatch, language]);\n\n  const handleLanguageSelection = useCallback(\n    ({ selectedItem }) => {\n      setIsModalOpen(false);\n      dispatch(selectLanguage(selectedItem));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"language\">\n      <div className=\"language__selector\">\n        <Dropdown\n          ariaLabel=\"Languages\"\n          direction=\"bottom\"\n          helperText=\"Select the language to work with.\"\n          id=\"swagger-language-dropdown\"\n          invalidText=\"A valid value is required\"\n          items={languages}\n          label=\"Language selection\"\n          selectedItem={selectedLanguage ?? ''}\n          onChange={handleLanguageSelection}\n        />\n      </div>\n      <div className=\"language__actions\">\n        <Link\n          disabled={!isSwagger}\n          href=\"#\"\n          onClick={() => {\n            setIsModalOpen(true);\n          }}\n        >\n          Add language\n        </Link>\n      </div>\n      <Modal\n        hasForm\n        iconDescription=\"Close\"\n        modalAriaLabel=\"Add a new language\"\n        modalHeading=\"Add language\"\n        modalLabel=\"Language\"\n        primaryButtonDisabled={\n          language.trim() === '' || languages.includes(language)\n        }\n        onRequestSubmit={onNewLanguage}\n        onSecondarySubmit={() => {\n          setIsModalOpen(false);\n        }}\n        open={isModalOpen}\n        primaryButtonText=\"Add\"\n        secondaryButtonText=\"Cancel\"\n        selectorPrimaryFocus=\"#text-input-1\"\n      >\n        <TextInput\n          id=\"text-input-1\"\n          labelText=\"Name\"\n          invalid={languages.includes(language)}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n          invalidText=\"Language already exists\"\n          placeholder=\"Type the language name...\"\n          type=\"text\"\n        />\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { TextArea } from 'carbon-components-react';\nimport { solarizedDark } from 'react-syntax-highlighter/dist/cjs/styles/hljs';\nimport { convertToDisplayString } from '../utils/utils';\n\nimport './ExampleCode.scss';\n\nconst ExampleCode = ({ name, code, language, onCodeChange }) => {\n  const _language = language === 'dotnet-standard' ? 'cs' : language;\n  return (\n    <div className=\"endpoint-example\">\n      <p>{name}</p>\n      <div className=\"text-area-wrapper\">\n        <div className=\"text-area\">\n          <TextArea\n            labelText={name}\n            hideLabel={true}\n            invalidText=\"A valid code snippet is required\"\n            placeholder=\"Type code snippet here...\"\n            cols={80}\n            rows={20}\n            onChange={onCodeChange}\n            value={convertToDisplayString(code)}\n          />\n        </div>\n        <div className=\"text-area\">\n          <SyntaxHighlighter\n            className=\"example-container--code\"\n            language={_language}\n            style={solarizedDark}\n          >\n            {convertToDisplayString(code)}\n          </SyntaxHighlighter>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nExampleCode.defaultProps = {\n  code: [],\n  language: 'node',\n  updateExample: () => {},\n};\n\nexport default React.memo(\n  ExampleCode,\n  (prev, next) => prev.code === next.code && prev.language === next.language\n);\n","import React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Accordion, AccordionItem } from 'carbon-components-react';\n\nimport ExampleCode from './ExampleCode';\n\nimport { getEndpointExamples } from '../redux/selectors';\nimport { updateExample } from '../redux/ducks';\n\nimport { convertToDisplayString } from '../utils/utils';\n\nimport './ExamplesContainer.scss';\n\nconst ExamplesContainer = () => {\n  const dispatch = useDispatch();\n\n  const { endpointExamples, selectedLanguage } = useSelector(\n    (state) => ({\n      endpointExamples: getEndpointExamples(state),\n      selectedLanguage: state.selectedLanguage,\n    }),\n    shallowEqual\n  );\n\n  const onCodeChange = (endpoint, example, index) => (e) => {\n    const codeExample = convertToDisplayString(example.code);\n    const newCodeExample = e.target.value;\n    if (newCodeExample !== codeExample) {\n      dispatch(\n        updateExample({\n          path: endpoint.path,\n          method: endpoint.method,\n          language: selectedLanguage,\n          index: index,\n          newCodeExample,\n        })\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Accordion>\n        {endpointExamples.map((endpoint) => (\n          <AccordionItem\n            key={endpoint.operationId}\n            title={endpoint.operationId}\n          >\n            <div className=\"examples-container__endpoint\">\n              {endpoint.examples.map((example, index) => (\n                <ExampleCode\n                  key={example.name}\n                  code={example.code}\n                  name={example.name}\n                  language={selectedLanguage}\n                  onCodeChange={onCodeChange(endpoint, example, index)}\n                />\n              ))}\n            </div>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </div>\n  );\n};\n\nexport default ExamplesContainer;\n","import React from 'react';\n\nimport ExportContainer from './ExportContainer';\nimport LanguageContainer from './LanguageContainer';\nimport ExamplesContainer from './ExamplesContainer';\n\nimport './File.scss';\n\nexport default function File() {\n  return (\n    <div className=\"file\">\n      <div className=\"file__languages\">\n        <LanguageContainer />\n      </div>\n      <div className=\"file__operations\">\n        <ExamplesContainer />\n      </div>\n      <div className=\"file__actions\">\n        <ExportContainer />\n      </div>\n    </div>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { Dropdown } from 'carbon-components-react';\nimport File from './File';\n\nimport { selectFile } from '../redux/ducks';\n\nimport './FileList.scss';\n\nexport default function FileList() {\n  const dispatch = useDispatch();\n\n  const { allIds, selectedId } = useSelector(\n    (state) => ({\n      allIds: state.allIds,\n      selectedId: state.selectedId,\n    }),\n    shallowEqual\n  );\n\n  const handleFileSelection = useCallback(\n    ({ selectedItem }) => {\n      dispatch(selectFile(selectedItem));\n    },\n    [dispatch]\n  );\n\n  if (allIds.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"file-list\">\n      <div className=\"file-list__selector\">\n        <Dropdown\n          ariaLabel=\"API Definitions\"\n          direction=\"bottom\"\n          helperText=\"Swagger File Selection\"\n          id=\"swagger-dropdown\"\n          invalidText=\"A valid value is required\"\n          items={allIds}\n          label=\"API Selection\"\n          selectedItem={selectedId}\n          onChange={handleFileSelection}\n          type=\"default\"\n        />\n      </div>\n      {selectedId && <File />}\n    </section>\n  );\n}\n","import React, { Component } from 'react';\nimport InputContainer from './InputContainer';\nimport {\n  Header,\n  HeaderName,\n} from 'carbon-components-react/lib/components/UIShell';\n\nimport FileList from './FileList';\n\nimport './App.scss';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header aria-label=\"IBM Examples Editor\">\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            SDK Examples Editor\n          </HeaderName>\n        </Header>\n        <div className=\"bx--grid App__content\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col\">\n              <InputContainer />\n              <FileList />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}