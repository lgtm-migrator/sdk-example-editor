{"version":3,"sources":["utils/utils.js","redux/ducks/index.js","redux/store.js","components/InputContainer.js","redux/selectors/index.js","components/ExportContainer.js","components/LanguageContainer.js","components/ExampleCode.js","components/ExamplesContainer.js","components/File.js","components/FileList.js","components/App.js","serviceWorker.js","index.js"],"names":["languageToExtension","java","node","python","ruby","go","swift","dotnet","php","convertToDisplayString","json","map","line","replace","join","filesSlice","createSlice","name","initialState","byId","allIds","selectedId","selectedLanguage","reducers","loadFiles","state","action","payload","forEach","swagger","content","split","pop","JSON","parse","yaml","safeLoad","Object","keys","sort","selectLanguage","updateExample","path","method","language","index","newCodeExample","operationMethod","paths","requestExamples","languageExamples","length","push","example","type","source","displayString","displayStringArray","convertToJSON","addLanguage","languages","info","selectFile","id","actions","reducer","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","persistStore","readFileContent","file","fileReader","FileReader","Promise","resolve","reject","onload","event","target","result","onerror","error","readAsText","InputContainer","dispatch","useDispatch","onDrop","useCallback","acceptedFiles","a","files","console","useDropzone","getRootProps","getInputProps","isDragActive","className","getSelectedSwagger","getIsJson","getIsSwagger","createSelector","emptyArray","getLanguages","getEndpointExamples","isSwagger","endpointExamples","entries","pathInfo","methodInfo","Array","isArray","sdkExamples","examples","exampleName","codeArray","code","endpoint","operationId","summary","ExportContainer","useSelector","isJson","shallowEqual","buildOutputFile","zip","JSZip","Blob","stringify","safeDump","exampleFolder","folder","languageExample","langaugeFolder","jsonArray","generateAsync","then","blob","FileSaver","saveAs","Button","onClick","LanguageContainer","useState","isModalOpen","setIsModalOpen","setLanguage","onNewLanguage","trim","handleLanguageSelection","selectedItem","Dropdown","ariaLabel","direction","helperText","invalidText","items","label","onChange","Link","href","Modal","hasForm","iconDescription","modalAriaLabel","modalHeading","modalLabel","primaryButtonDisabled","includes","onRequestSubmit","onSecondarySubmit","open","primaryButtonText","secondaryButtonText","selectorPrimaryFocus","TextInput","labelText","invalid","e","value","placeholder","ExampleCode","onCodeChange","TextArea","hideLabel","cols","rows","style","solarizedDark","defaultProps","ExamplesContainer","Accordion","AccordionItem","title","File","FileList","handleFileSelection","App","aria-label","prefix","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a2a2ebf8.chunk.js","sourcesContent":["export const languageToExtension = {\n  java: '.java',\n  node: '.js',\n  python: '.py',\n  ruby: '.rb',\n  go: '.go',\n  swift: '.swift',\n  dotnet: '.cs',\n  'c#': '.cs',\n  php: '.php',\n  'dotnet-standard': '.cs',\n};\n\n/**\n * Converts code example String displayed in the UI to a JSON array\n * to be manipulated internally.\n *\n * @param {String} displayString the String representing the code\n * example in the UI\n */\nexport const convertToJSON = (displayString) => {\n  const displayStringArray = displayString.split('\\n');\n  return displayStringArray.map((line, index) => {\n    if (index === displayStringArray.length - 1) {\n      return line;\n    }\n    return `${line}\\n`;\n  });\n};\n\n/**\n * Converts JSON representation of code example to a String to be\n * displayed in the UI.\n *\n * @param {Object} json JSON array of the lines of the code example\n */\nexport const convertToDisplayString = (json) =>\n  json.map((line) => line.replace('\\n', '').replace('\\\\', '')).join('\\n');\n","import { createSlice } from '@reduxjs/toolkit';\nimport yaml from 'js-yaml';\n\nimport { convertToJSON } from '../../utils/utils';\n\nconst loadFilesReducer = (state, action) => {\n  const files = action.payload;\n  files.forEach(({ name, content }) => {\n    const isJson = name.split('.').pop() === 'json';\n    let swagger;\n\n    if (isJson) {\n      swagger = JSON.parse(content);\n    } else {\n      swagger = yaml.safeLoad(content);\n    }\n\n    state.byId[name] = swagger;\n    state.allIds = Object.keys(state.byId).sort();\n    state.selectedId = name;\n    state.selectLanguage = null;\n  });\n};\n\nconst updateExampleReducer = (state, action) => {\n  const swagger = state.byId[state.selectedId];\n\n  if (!swagger) {\n    return;\n  }\n\n  const { path, method, language, index, newCodeExample } = action.payload;\n\n  let operationMethod = swagger.paths[path][method];\n  // add surrounding JSON if necessary\n  if (!operationMethod['x-sdk-operations']) {\n    operationMethod = {\n      ...operationMethod,\n      'x-sdk-operations': {\n        'request-examples': {},\n      },\n    };\n  }\n  swagger.paths[path][method] = operationMethod;\n\n  let requestExamples = operationMethod['x-sdk-operations']['request-examples'];\n\n  // no example is defined for this language, so we need to add some surrounding JSON first\n  if (!requestExamples[language]) {\n    requestExamples = {\n      ...requestExamples,\n      [language]: [],\n    };\n  }\n  let languageExamples = requestExamples[language];\n\n  // another case of a new example, so we have to do a similar thing to above\n  if (languageExamples.length === 0) {\n    languageExamples.push({\n      name: 'Example request',\n      example: [\n        {\n          type: 'code',\n          source: [],\n        },\n      ],\n    });\n  }\n\n  languageExamples[index]['example'][0]['source'] = convertToJSON(\n    newCodeExample\n  );\n  swagger.paths[path][method]['x-sdk-operations']['request-examples'][\n    language\n  ] = languageExamples;\n};\n\nconst addLanguageReducer = (state, action) => {\n  const language = action.payload;\n  const swagger = state.byId[state.selectedId];\n\n  if (!swagger) {\n    return;\n  }\n\n  const languages = swagger.info['x-sdk-supported-languages'] ?? [];\n\n  if (language !== 'curl') {\n    languages.push(language);\n  }\n  swagger.info['x-sdk-supported-languages'] = languages;\n};\n\nconst filesSlice = createSlice({\n  name: 'files',\n  initialState: {\n    byId: {},\n    allIds: [],\n    selectedId: null,\n    selectedLanguage: null,\n  },\n  reducers: {\n    loadFiles: loadFilesReducer,\n    updateExample: updateExampleReducer,\n    addLanguage: addLanguageReducer,\n    selectFile: (state, action) => {\n      const id = action.payload;\n      state.selectedId = id;\n    },\n    selectLanguage: (state, action) => {\n      state.selectedLanguage = action.payload;\n    },\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer } = filesSlice;\n// Extract and export each action creator by name\nexport const {\n  loadFiles,\n  selectFile,\n  selectLanguage,\n  updateExample,\n  addLanguage,\n} = actions;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { persistStore, persistReducer } from 'redux-persist';\n\nimport reducer from './ducks';\n\nconst persistConfig = {\n  key: 'sdk-examples',\n  storage,\n};\n\n// Middleware: Redux Persist Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [\n    ...getDefaultMiddleware({\n      immutableCheck: false,\n      serializableCheck: false,\n    }),\n  ],\n});\n\npersistStore(store);\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\n\nimport { loadFiles } from '../redux/ducks';\n\nimport './InputContainer.scss';\n\nconst readFileContent = (file) => {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onload = (event) => resolve(event.target.result);\n    fileReader.onerror = (error) => reject(error);\n    fileReader.readAsText(file);\n  });\n};\n\nexport default function InputContainer() {\n  const dispatch = useDispatch();\n\n  const onDrop = useCallback(\n    async (acceptedFiles) => {\n      const files = [];\n      for (const file of acceptedFiles) {\n        try {\n          const content = await readFileContent(file);\n          files.push({ name: file.name, content });\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      dispatch(loadFiles(files));\n    },\n    [dispatch]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <section className=\"file-input\">\n      <div className=\"file-input__dropbox\" {...getRootProps()}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the SDK examples here ...</p>\n        ) : (\n          <p>Drag 'n' drop some SDK examples here, or click to select files</p>\n        )}\n      </div>\n    </section>\n  );\n}\n","import { createSelector } from 'reselect';\n\nconst getSelectedLanguage = (state) => state.selectedLanguage;\nconst getSelectedSwagger = (state) => state.byId[state.selectedId];\n\nexport const getIsJson = (state) =>\n  state.selectedId && state.selectedId.split('.').pop() === 'json';\n\nexport const getIsSwagger = createSelector([getSelectedSwagger], (swagger) => {\n  return !!swagger?.info;\n});\n\nconst emptyArray = [];\nexport const getLanguages = createSelector([getSelectedSwagger], (swagger) => {\n  return swagger?.info?.['x-sdk-supported-languages'] ?? emptyArray;\n});\n\nexport const getEndpointExamples = createSelector(\n  [getSelectedSwagger, getSelectedLanguage, getIsSwagger],\n  (swagger, selectedLanguage, isSwagger) => {\n    const endpointExamples = [];\n\n    if (!isSwagger) {\n      return endpointExamples;\n    }\n\n    Object.entries(swagger.paths).forEach(([path, pathInfo]) => {\n      Object.entries(pathInfo).forEach(([method, methodInfo]) => {\n        // this is something we don't want, like a parameters array\n        if (Array.isArray(methodInfo)) {\n          return;\n        }\n\n        const sdkExamples = methodInfo['x-sdk-operations'];\n        let examples = [];\n\n        const language = isSwagger\n          ? selectedLanguage\n          : Object.keys(sdkExamples['request-examples'])[0];\n\n        if (\n          sdkExamples &&\n          sdkExamples['request-examples'] &&\n          sdkExamples['request-examples'][selectedLanguage]\n        ) {\n          sdkExamples['request-examples'][language].forEach((example) => {\n            if (!example.example) {\n              return;\n            }\n            const exampleName = example['name'];\n            const codeArray = example['example'][0]['source'];\n\n            examples.push({\n              name: exampleName,\n              code: codeArray,\n            });\n          });\n        }\n\n        // show blank example for user to add a new one in the\n        // case there's nothing there\n        if (examples.length === 0) {\n          examples.push({\n            name: 'none',\n            code: [],\n          });\n        }\n\n        const endpoint = {\n          path,\n          method,\n          operationId: methodInfo.operationId,\n          summary: methodInfo.summary,\n          examples,\n        };\n        endpointExamples.push(endpoint);\n      });\n    });\n    return endpointExamples;\n  }\n);\n","import React, { useCallback } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { Button } from 'carbon-components-react';\nimport FileSaver from 'file-saver';\nimport JSZip from 'jszip';\nimport yaml from 'js-yaml';\n\nimport { getIsJson } from '../redux/selectors';\n\nimport { convertToDisplayString, languageToExtension } from '../utils/utils';\n\nexport default function ExportContainer() {\n  const { swagger, selectedId, isJson } = useSelector(\n    (state) => ({\n      swagger: state.byId[state.selectedId],\n      selectedId: state.selectedId,\n      isJson: getIsJson(state),\n    }),\n    shallowEqual\n  );\n\n  const buildOutputFile = useCallback(() => {\n    const zip = new JSZip();\n\n    if (isJson) {\n      zip.file(\n        selectedId,\n        new Blob([JSON.stringify(swagger, null, 2)], {\n          type: 'application/json',\n        })\n      );\n    } else {\n      zip.file(\n        selectedId,\n        new Blob([yaml.safeDump(swagger)], {\n          type: 'application/x-yaml',\n        })\n      );\n    }\n\n    const exampleFolder = zip.folder('examples');\n    Object.entries(swagger.paths).forEach(([_, pathInfo]) => {\n      Object.entries(pathInfo).forEach(([_, methodInfo]) => {\n        // this is something we don't want, like a parameters array\n        if (Array.isArray(methodInfo)) {\n          return;\n        }\n\n        const sdkExamples = methodInfo['x-sdk-operations'];\n        if (sdkExamples && sdkExamples['request-examples']) {\n          // create sub-folders for examples in each language\n          Object.entries(sdkExamples['request-examples']).forEach(\n            ([language, languageExample]) => {\n              if (language === 'curl') {\n                return;\n              }\n              const langaugeFolder = exampleFolder.folder(language);\n\n              languageExample.forEach((example, index) => {\n                // ignore other examples types like markdown\n                if (!example.example) {\n                  return;\n                }\n                let jsonArray = example['example'][0]['source'];\n                // handle cases where some examples are nested for whatever reason\n                while (Array.isArray(jsonArray[0])) {\n                  jsonArray = jsonArray[0];\n                }\n                langaugeFolder.file(\n                  `${methodInfo.operationId}${index > 0 ? index : ''}${\n                    languageToExtension[language]\n                  }`,\n                  new Blob([convertToDisplayString(jsonArray)])\n                );\n              });\n            }\n          );\n        }\n      });\n    });\n\n    zip\n      .generateAsync({ type: 'blob' })\n      .then((blob) => FileSaver.saveAs(blob, `${selectedId}.zip`));\n  }, [isJson, selectedId, swagger]);\n\n  return (\n    <div>\n      <Button className=\"button\" onClick={buildOutputFile} type=\"submit\">\n        Download\n      </Button>\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Modal, TextInput, Dropdown } from 'carbon-components-react';\n\nimport { getLanguages, getIsSwagger } from '../redux/selectors';\nimport { selectLanguage } from '../redux/ducks';\n\nimport { addLanguage } from '../redux/ducks';\n\nimport './LanguageContainer.scss';\n\nexport default function LanguageContainer() {\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [language, setLanguage] = useState('');\n\n  const { languages, selectedLanguage, isSwagger } = useSelector(\n    (state) => ({\n      languages: getLanguages(state),\n      selectedLanguage: state.selectedLanguage,\n      isSwagger: getIsSwagger(state),\n    }),\n    shallowEqual\n  );\n  const onNewLanguage = useCallback(() => {\n    setIsModalOpen(false);\n    dispatch(addLanguage(language.trim()));\n  }, [dispatch, language]);\n\n  const handleLanguageSelection = useCallback(\n    ({ selectedItem }) => {\n      setIsModalOpen(false);\n      dispatch(selectLanguage(selectedItem));\n    },\n    [dispatch]\n  );\n\n  if (!isSwagger) {\n    return null;\n  }\n  return (\n    <div className=\"language\">\n      <div className=\"language__selector\">\n        <Dropdown\n          ariaLabel=\"Languages\"\n          direction=\"bottom\"\n          helperText=\"Select the language to work with.\"\n          id=\"swagger-language-dropdown\"\n          invalidText=\"A valid value is required\"\n          items={languages}\n          label=\"Language selection\"\n          selectedItem={selectedLanguage ?? ''}\n          onChange={handleLanguageSelection}\n        />\n      </div>\n      <div className=\"language__actions\">\n        <Link\n          href=\"#\"\n          onClick={() => {\n            setIsModalOpen(true);\n          }}\n        >\n          Add language\n        </Link>\n      </div>\n      <Modal\n        hasForm\n        iconDescription=\"Close\"\n        modalAriaLabel=\"Add a new language\"\n        modalHeading=\"Add language\"\n        modalLabel=\"Language\"\n        primaryButtonDisabled={\n          language.trim() === '' || languages.includes(language)\n        }\n        onRequestSubmit={onNewLanguage}\n        onSecondarySubmit={() => {\n          setIsModalOpen(false);\n        }}\n        open={isModalOpen}\n        primaryButtonText=\"Add\"\n        secondaryButtonText=\"Cancel\"\n        selectorPrimaryFocus=\"#text-input-1\"\n      >\n        <TextInput\n          id=\"text-input-1\"\n          labelText=\"Name\"\n          invalid={languages.includes(language)}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n          invalidText=\"Language already exists\"\n          placeholder=\"Type the language name...\"\n          type=\"text\"\n        />\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { TextArea } from 'carbon-components-react';\nimport { solarizedDark } from 'react-syntax-highlighter/dist/cjs/styles/hljs';\nimport { convertToDisplayString } from '../utils/utils';\n\nimport './ExampleCode.scss';\n\nconst ExampleCode = ({ name, code, language, onCodeChange }) => {\n  return (\n    <div className=\"endpoint-example\">\n      <p>{name}</p>\n      <div className=\"text-area-wrapper\">\n        <div className=\"text-area\">\n          <TextArea\n            labelText={name}\n            hideLabel={true}\n            invalidText=\"A valid code snippet is required\"\n            placeholder=\"Type code snippet here...\"\n            cols={80}\n            rows={20}\n            onChange={onCodeChange}\n            value={convertToDisplayString(code)}\n          />\n        </div>\n        <div className=\"text-area\">\n          <SyntaxHighlighter\n            className=\"example-container--code\"\n            language={language}\n            style={solarizedDark}\n          >\n            {convertToDisplayString(code)}\n          </SyntaxHighlighter>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nExampleCode.defaultProps = {\n  code: [],\n  language: 'node',\n  updateExample: () => {},\n};\n\nexport default ExampleCode;\n","import React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Accordion, AccordionItem } from 'carbon-components-react';\nimport ExampleCode from './ExampleCode';\n\nimport { getEndpointExamples } from '../redux/selectors';\n\nimport { updateExample } from '../redux/ducks';\n\nimport './ExamplesContainer.scss';\n\nconst ExamplesContainer = () => {\n  const dispatch = useDispatch();\n\n  const { endpointExamples, selectedLanguage } = useSelector(\n    (state) => ({\n      endpointExamples: getEndpointExamples(state),\n      selectedLanguage: state.selectedLanguage,\n    }),\n    shallowEqual\n  );\n\n  if (!selectedLanguage) {\n    return null;\n  }\n  return (\n    <div>\n      <Accordion>\n        {endpointExamples.map((endpoint) => (\n          <AccordionItem\n            key={endpoint.operationId}\n            title={endpoint.operationId}\n          >\n            <div className=\"examples-container__endpoint\">\n              {endpoint.examples.map((example, index) => (\n                <ExampleCode\n                  key={example.name}\n                  code={example.code}\n                  name={example.name}\n                  language={selectedLanguage}\n                  onCodeChange={(newCodeExample) =>\n                    dispatch(\n                      updateExample({\n                        path: endpoint.path,\n                        method: endpoint.method,\n                        language: selectedLanguage,\n                        index: index,\n                        newCodeExample: newCodeExample.target.value,\n                      })\n                    )\n                  }\n                />\n              ))}\n            </div>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </div>\n  );\n};\n\nexport default ExamplesContainer;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport ExportContainer from './ExportContainer';\nimport LanguageContainer from './LanguageContainer';\nimport ExamplesContainer from './ExamplesContainer';\n\nimport './File.scss';\n\nexport default function File() {\n  const selectedLanguage = useSelector((state) => state.selectedLanguage);\n\n  return (\n    <div className=\"file\">\n      <div className=\"file__languages\">\n        <LanguageContainer />\n      </div>\n      {selectedLanguage && (\n        <>\n          <div className=\"file__operations\">\n            <ExamplesContainer />\n          </div>\n          <div className=\"file__actions\">\n            <ExportContainer />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { Dropdown } from 'carbon-components-react';\nimport File from './File';\n\nimport { selectFile } from '../redux/ducks';\n\nimport './FileList.scss';\n\nexport default function FileList() {\n  const dispatch = useDispatch();\n\n  const { allIds, selectedId } = useSelector(\n    (state) => ({\n      allIds: state.allIds,\n      selectedId: state.selectedId,\n    }),\n    shallowEqual\n  );\n\n  const handleFileSelection = useCallback(\n    ({ selectedItem }) => {\n      dispatch(selectFile(selectedItem));\n    },\n    [dispatch]\n  );\n\n  if (allIds.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"file-list\">\n      <div className=\"file-list__selector\">\n        <Dropdown\n          ariaLabel=\"API Definitions\"\n          direction=\"bottom\"\n          helperText=\"Swagger File Selection\"\n          id=\"swagger-dropdown\"\n          invalidText=\"A valid value is required\"\n          items={allIds}\n          label=\"API Selection\"\n          selectedItem={selectedId}\n          onChange={handleFileSelection}\n          type=\"default\"\n        />\n      </div>\n      {selectedId && <File />}\n    </section>\n  );\n}\n","import React, { Component } from 'react';\nimport InputContainer from './InputContainer';\nimport {\n  Header,\n  HeaderName,\n} from 'carbon-components-react/lib/components/UIShell';\n\nimport FileList from './FileList';\n\nimport './App.scss';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header aria-label=\"IBM Examples Editor\">\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            SDK Examples Editor\n          </HeaderName>\n        </Header>\n        <div className=\"bx--grid App__content\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col\">\n              <InputContainer />\n              <FileList />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}