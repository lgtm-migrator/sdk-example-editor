{
  "swagger": "2.0",
  "basePath": "/assistant/api",
  "info": {
    "version": "2.0",
    "title": "Watson Assistant v2",
    "description": "The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and integrated dialog tools to create conversation flows between your apps and your users.",
    "x-version-dates": [
      "2018-11-08"
    ],
    "x-sdk-supported-languages": [
      "java",
      "node",
      "python"
    ],
    "x-vcap-service-name": "conversation",
    "x-watson-host": "gateway.watsonplatform.net",
    "x-alternate-name": "Assistant"
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    },
    "IAM": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {
      "IAM": []
    }
  ],
  "externalDocs": {
    "description": "For more information about this service, see the docs.",
    "url": "https://console.bluemix.net/docs/services/assistant/"
  },
  "x-doc-properties": [
    "hasCustomEndpoints",
    "hasDataLabels",
    "toolAuthorization"
  ],
  "tags": [
    {
      "name": "Sessions"
    },
    {
      "name": "Message"
    }
  ],
  "paths": {
    "/v2/assistants/{assistant_id}/sessions/{session_id}/message": {
      "post": {
        "operationId": "message",
        "summary": "Send user input to assistant",
        "description": "Send user input to an assistant and receive a response.\n\nThere is no rate limit for this operation.",
        "tags": [
          "Message"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AssistantPathParam"
          },
          {
            "$ref": "#/parameters/SessionPathParam"
          },
          {
            "$ref": "#/parameters/VersionQueryParam"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "description": "The message to be sent. This includes the user's input, along with optional content such as intents and entities.",
            "schema": {
              "$ref": "#/definitions/MessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            },
            "examples": {
              "application/json": {
                "output": {
                  "generic": [
                    {
                      "response_type": "text",
                      "text": "Hello! What can I do for you?"
                    }
                  ],
                  "intents": [
                    {
                      "intent": "hello",
                      "confidence": 1
                    }
                  ],
                  "entities": []
                }
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "description": "Invalid request."
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" -X POST -H \"Content-Type:application/json\" -d \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\"}}\" \"https://gateway.watsonplatform.net/assistant/api/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2018-11-08\""
                    ]
                  }
                ]
              },
              {
                "name": "Example including context",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" -X POST -H \"Content-Type: application/json\" -d \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\", \\\"options\\\": {\\\"return_context\\\": true}}, \\\"context\\\": {\\\"global\\\": {\\\"system\\\": {\\\"user_id\\\": \\\"my_user_id\\\"}}, \\\"skills\\\": {\\\"main skill\\\": {\\\"user_defined\\\": {\\\"account_number\\\": \\\"123456\\\"}}}}}\" \"https://gateway.watsonplatform.net/conversation/api/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2018-11-08\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamOptions iamOptions = new IamOptions.Builder().apiKey(\"{apikey}\").build();\n",
                      "Assistant service = new Assistant(\"2018-11-08\", iamOptions);\n",
                      "\n",
                      "MessageInput input = new MessageInput.Builder()\n",
                      "  .messageType(\"text\")\n",
                      "  .text(\"Hello\")\n",
                      "  .build();\n",
                      "\n",
                      "MessageOptions options = new MessageOptions.Builder(\"{assistant_id}\", \"{session_id}\")\n",
                      "  .input(input)\n",
                      "  .build();\n",
                      "\n",
                      "MessageResponse response = service.message(options).execute();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example including context",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamOptions iamOptions = new IamOptions.Builder().apiKey(\"{apikey}\").build();\n",
                      "Assistant service = new Assistant(\"2018-11-08\", iamOptions);\n",
                      "\n",
                      "MessageInputOptions inputOptions = new MessageInputOptions();\n",
                      "inputOptions.setReturnContext(true);\n",
                      "\n",
                      "MessageInput input = new MessageInput.Builder()\n",
                      "  .messageType(\"text\")\n",
                      "  .text(\"Hello\")\n",
                      "  .options(inputOptions)\n",
                      "  .build();\n",
                      "\n",
                      "MessageContextGlobalSystem system = new MessageContextGlobalSystem();\n",
                      "system.setUserId(\"my_user_id\");\n",
                      "MessageContextGlobal globalContext = new MessageContextGlobal();\n",
                      "globalContext.setSystem(system);\n",
                      "\n",
                      "Map<String, String> userDefinedContext = new HashMap<>();\n",
                      "userDefinedContext.put(\"account_num\",\"123456\");\n",
                      "Map<String, Map> mainSkillContext = new HashMap<>();\n",
                      "mainSkillContext.put(\"user_defined\", userDefinedContext);\n",
                      "MessageContextSkills skillsContext = new MessageContextSkills();\n",
                      "skillsContext.put(\"main skill\", mainSkillContext);\n",
                      "\n",
                      "MessageContext context = new MessageContext();\n",
                      "context.setGlobal(globalContext);\n",
                      "context.setSkills(skillsContext);\n",
                      "\n",
                      "MessageOptions options = new MessageOptions.Builder(\"{assistant_id}\", \"{session_id}\")\n",
                      "  .input(input)\n",
                      "  .context(context)\n",
                      "  .build();\n",
                      "\n",
                      "MessageResponse response = service.message(options).execute();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var watson = require('watson-developer-cloud');\n",
                      "\n",
                      "var service = new watson.AssistantV2({\n",
                      "  iam_apikey: '{apikey}',\n",
                      "  version: '2018-11-08'\n",
                      "});\n",
                      "\n",
                      "service.message({\n",
                      "  assistant_id: '{assistant_id}',\n",
                      "  session_id: '{session_id}',\n",
                      "  input: {\n",
                      "    'message_type': 'text',\n",
                      "    'text': 'Hello'}\n",
                      "}, function(err, response) {\n",
                      "  if (err)\n",
                      "    console.log('error:', err);\n",
                      "  else\n",
                      "    console.log(JSON.stringify(response, null, 2));\n",
                      "});"
                    ]
                  }
                ]
              },
              {
                "name": "Example including context",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var watson = require('watson-developer-cloud');\n",
                      "\n",
                      "var service = new watson.AssistantV2({\n",
                      "  iam_apikey: '{apikey}',\n",
                      "  version: '2018-11-08'\n",
                      "});\n",
                      "\n",
                      "service.message({\n",
                      "  assistant_id: '{assistant_id}',\n",
                      "  session_id: '{session_id}',\n",
                      "  input: {\n",
                      "    'message_type': 'text',\n",
                      "    'text': 'Hello',\n",
                      "    'options': {\n",
                      "      'return_context': true\n",
                      "    }\n",
                      "  },\n",
                      "  context: {\n",
                      "    'global': {\n",
                      "      'system': {\n",
                      "        'user_id': 'my_user_id'\n",
                      "      }\n",
                      "    },\n",
                      "    'skills': {\n",
                      "      'main skill': {\n",
                      "        'user_defined': {\n",
                      "          'account_number': '123456'\n",
                      "        }\n",
                      "      }\n",
                      "    }\n",
                      "  }\n",
                      "}, function(err, response) {\n",
                      "  if (err)\n",
                      "    console.log('error:', err);\n",
                      "  else\n",
                      "    console.log(JSON.stringify(response, null, 2));\n",
                      "});"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "import watson_developer_cloud\n",
                      "\n",
                      "service = watson_developer_cloud.AssistantV2(\n",
                      "    iam_apikey='{apikey}',\n",
                      "    version='2018-11-08'\n",
                      ")\n",
                      "\n",
                      "response = service.message(\n",
                      "    assistant_id='{assistant_id}',\n",
                      "    session_id='{session_id}',\n",
                      "    input={\n",
                      "        'message_type': 'text',\n",
                      "        'text': 'Hello'\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example including context",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "import watson_developer_cloud\n",
                      "\n",
                      "service=watson_developer_cloud.AssistantV2(\n",
                      "    iam_apikey='{apikey}',\n",
                      "    version='2018-11-08'\n",
                      ")\n",
                      "\n",
                      "response=service.message(\n",
                      "    assistant_id='{assistant_id}',\n",
                      "    session_id='{session_id}',\n",
                      "    input={\n",
                      "        'message_type': 'text',\n",
                      "        'text': 'Hello',\n",
                      "        'options': {\n",
                      "            'return_context': True\n",
                      "        }\n",
                      "    },\n",
                      "    context={\n",
                      "        'global': {\n",
                      "            'system': {\n",
                      "                'user_id': 'my_user_id'\n",
                      "            }\n",
                      "        },\n",
                      "        'skills': {\n",
                      "            'main skill': {\n",
                      "                'user_defined': {\n",
                      "                    'account_number': '123456'\n",
                      "                }\n",
                      "            }\n",
                      "        }\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v2/assistants/{assistant_id}/sessions": {
      "parameters": [
        {
          "$ref": "#/parameters/AssistantPathParam"
        },
        {
          "$ref": "#/parameters/VersionQueryParam"
        }
      ],
      "post": {
        "operationId": "createSession",
        "summary": "Create a session",
        "description": "Create a new session. A session is used to send user input to a skill and receive responses. It also maintains the state of the conversation.",
        "tags": [
          "Sessions"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            },
            "examples": {
              "application/json": {
                "session_id": "af11c111-860d-4071-b6d2-550bf20c016e"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "description": "Invalid request."
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" -X POST \"https://gatewaywatsonplatform.net/assistant/api/v2/assistants/{assistant_id}/sessions?version=2018-11-08\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamOptions iamOptions = new IamOptions.Builder().apiKey(\"{apikey}\").build();\n",
                      "Assistant service = new Assistant(\"2018-11-08\", iamOptions);\n",
                      "\n",
                      "CreateSessionOptions options = new CreateSessionOptions.Builder(\"{assistant_id}\").build();\n",
                      "\n",
                      "SessionResponse response = service.createSession(options).execute();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var watson = require('watson-developer-cloud');\n",
                      "\n",
                      "var service = new watson.AssistantV2({\n",
                      "  iam_apikey: '{apikey}',\n",
                      "  version: '2018-11-08'\n",
                      "});\n",
                      "\n",
                      "service.createSession({\n",
                      "  assistant_id: '{assistant_id}',\n",
                      "}, function(err, response) {\n",
                      "  if (err) {\n",
                      "    console.error(err);\n",
                      "  } else{\n",
                      "    console.log(JSON.stringify(response, null, 2));\n",
                      "  }\n",
                      "});"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "import watson_developer_cloud\n",
                      "\n",
                      "service=watson_developer_cloud.AssistantV2(\n",
                      "    iam_apikey='{apikey}',\n",
                      "    version='2018-11-08'\n",
                      ")\n",
                      "\n",
                      "response = service.create_session(\n",
                      "    assistant_id='{assistant_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v2/assistants/{assistant_id}/sessions/{session_id}": {
      "parameters": [
        {
          "$ref": "#/parameters/AssistantPathParam"
        },
        {
          "$ref": "#/parameters/VersionQueryParam"
        },
        {
          "$ref": "#/parameters/SessionPathParam"
        }
      ],
      "delete": {
        "operationId": "deleteSession",
        "summary": "Delete session",
        "description": "Deletes a session explicitly before it times out.",
        "tags": [
          "Sessions"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "schema": {
              "properties": {}
            },
            "description": "Successful request."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "description": "Invalid request."
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" -X DELETE \"https://gateway.watsonplatform.net/assistant/api/v2/assistants/{assistant_id}/sessions/{session_id}?version=2018-11-08\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamOptions iamOptions = new IamOptions.Builder().apiKey(\"{apikey}\").build();\n",
                      "Assistant service = new Assistant(\"2018-11-08\", iamOptions);\n",
                      "\n",
                      "DeleteSessionOptions options = new DeleteSessionOptions.Builder(\"{assistant_id}\", \"{session_id}\").build();\n",
                      "\n",
                      "service.deleteSession(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var watson = require('watson-developer-cloud');\n",
                      "\n",
                      "var service = new watson.AssistantV2({\n",
                      "  iam_apikey: '{apikey}',\n",
                      "  version: '2018-11-08'\n",
                      "});\n",
                      "\n",
                      "service.deleteSession({\n",
                      "  assistant_id: '{assistant_id}',\n",
                      "  session_id: '{session_id}',\n",
                      "}, function(err, response) {\n",
                      "  if (err) {\n",
                      "    console.error(err);\n",
                      "  } else{\n",
                      "    console.log(JSON.stringify(response, null, 2));\n",
                      "  }\n",
                      "});"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "import watson_developer_cloud\n",
                      "\n",
                      "service=watson_developer_cloud.AssistantV2(\n",
                      "    iam_apikey='{apikey}',\n",
                      "    version='2018-11-08'\n",
                      ")\n",
                      "\n",
                      "response = service.delete_session(\n",
                      "    assistant_id='{assistant_id}',\n",
                      "    session_id='{session_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    }
  },
  "parameters": {
    "VersionQueryParam": {
      "in": "query",
      "name": "version",
      "required": true,
      "default": "2018-11-08",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
      "type": "string",
      "description": "Release date of the API version you want to use. Specify dates in YYYY-MM-DD format. The current version is `2018-11-08`."
    },
    "AssistantPathParam": {
      "in": "path",
      "name": "assistant_id",
      "required": true,
      "default": "0a0c06c1-8e31-4655-9067-58fcac5134fc",
      "type": "string",
      "description": "Unique identifier of the assistant. You can find the assistant ID of an assistant on the **Assistants** tab of the Watson Assistant tool. For information about creating assistants, see the [documentation](https://console.bluemix.net/docs/services/assistant/create-assistant.html#creating-assistants).\n\n**Note:** Currently, the v2 API does not support creating assistants."
    },
    "SessionPathParam": {
      "in": "path",
      "name": "session_id",
      "required": true,
      "default": "b9c3c9a2-1c05-49fc-8fdc-d1e6409022c5",
      "type": "string",
      "description": "Unique identifier of the session."
    }
  },
  "definitions": {
    "MessageInputOptions": {
      "type": "object",
      "description": "Optional properties that control how the assistant responds.",
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "Whether to return additional diagnostic information. Set to `true` to return additional information under the `output.debug` key.",
          "default": false
        },
        "restart": {
          "type": "boolean",
          "description": "Whether to start a new conversation with this user input. Specify `true` to clear the state information stored by the session.",
          "default": false
        },
        "alternate_intents": {
          "type": "boolean",
          "description": "Whether to return more than one intent. Set to `true` to return all matching intents.",
          "default": false
        },
        "return_context": {
          "type": "boolean",
          "description": "Whether to return session context with the response. If you specify `true`, the response will include the `context` property.",
          "default": false
        }
      }
    },
    "RuntimeIntent": {
      "type": "object",
      "description": "An intent identified in the user input.",
      "required": [
        "intent",
        "confidence"
      ],
      "properties": {
        "intent": {
          "type": "string",
          "description": "The name of the recognized intent."
        },
        "confidence": {
          "type": "number",
          "format": "double",
          "description": "A decimal percentage that represents Watson's confidence in the intent."
        }
      }
    },
    "RuntimeEntity": {
      "description": "A term from the request that was identified as an entity.",
      "type": "object",
      "required": [
        "entity",
        "location",
        "value"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "description": "An entity detected in the input."
        },
        "location": {
          "type": "array",
          "description": "An array of zero-based character offsets that indicate where the detected entity values begin and end in the input text.",
          "items": {
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 2
        },
        "value": {
          "type": "string",
          "description": "The term in the input text that was recognized as an entity value."
        },
        "confidence": {
          "type": "number",
          "description": "A decimal percentage that represents Watson's confidence in the entity."
        },
        "metadata": {
          "type": "object",
          "description": "Any metadata for the entity."
        },
        "groups": {
          "type": "array",
          "description": "The recognized capture groups for the entity, as defined by the entity pattern.",
          "items": {
            "title": "CaptureGroup",
            "type": "object",
            "required": [
              "group"
            ],
            "properties": {
              "group": {
                "type": "string",
                "description": "A recognized capture group for the entity."
              },
              "location": {
                "type": "array",
                "description": "Zero-based character offsets that indicate where the entity value begins and ends in the input text.",
                "items": {
                  "type": "integer"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        }
      },
      "example": {
        "entity": "appliance",
        "location": [
          12,
          18
        ],
        "value": "light",
        "metadata": {}
      }
    },
    "MessageInput": {
      "type": "object",
      "description": "The user input.",
      "properties": {
        "message_type": {
          "type": "string",
          "enum": [
            "text"
          ],
          "description": "The type of user input. Currently, only text input is supported.",
          "default": "text"
        },
        "text": {
          "type": "string",
          "description": "The text of the user input. This string cannot contain carriage return, newline, or tab characters, and it must be no longer than 2048 characters."
        },
        "options": {
          "description": "Properties that control how the assistant responds.",
          "$ref": "#/definitions/MessageInputOptions"
        },
        "intents": {
          "type": "array",
          "description": "Intents to use when evaluating the user input. Include intents from the previous response to continue using those intents rather than trying to recognize intents in the new input.",
          "items": {
            "$ref": "#/definitions/RuntimeIntent"
          },
          "x-item-name": "intent"
        },
        "entities": {
          "type": "array",
          "description": "Entities to use when evaluating the message. Include entities from the previous response to continue using those entities rather than detecting entities in the new input.",
          "items": {
            "$ref": "#/definitions/RuntimeEntity"
          },
          "x-item-name": "entity"
        },
        "suggestion_id": {
          "type": "string",
          "description": "For internal use only."
        }
      },
      "x-java-builder": true
    },
    "MessageContextGlobalSystem": {
      "type": "object",
      "description": "Properties that are shared by all skills used by the assistant.",
      "properties": {
        "timezone": {
          "description": "The user time zone. The assistant uses the time zone to correctly resolve relative time references.",
          "type": "string"
        },
        "user_id": {
          "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For Plus and Premium plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        },
        "turn_count": {
          "type": "integer",
          "description": "A counter that is automatically incremented with each turn of the conversation. A value of 1 indicates that this is the the first turn of a new conversation, which can affect the behavior of some skills."
        }
      }
    },
    "MessageContextGlobal": {
      "type": "object",
      "description": "Contains information that can be shared by all skills within the Assistant.",
      "properties": {
        "system": {
          "description": "Properties interpreted by the Assistant that are shared across all skills within the Assistant.",
          "$ref": "#/definitions/MessageContextGlobalSystem"
        }
      }
    },
    "MessageContextSkill": {
      "type": "object",
      "description": "Contains information specific to a particular skill within the Assistant.",
      "properties": {
        "user_defined": {
          "description": "Arbitrary variables that can be read and written to by a particular skill within the Assistant.",
          "type": "string",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "MessageContextSkills": {
      "type": "object",
      "description": "Contains information specific to particular skills within the Assistant.",
      "additionalProperties": {
        "$ref": "#/definitions/MessageContextSkill"
      }
    },
    "MessageContext": {
      "type": "object",
      "description": "State information for the conversation.",
      "properties": {
        "global": {
          "description": "Contains information that can be shared by all skills within the Assistant.",
          "$ref": "#/definitions/MessageContextGlobal"
        },
        "skills": {
          "description": "Contains information specific to particular skills within the Assistant.",
          "$ref": "#/definitions/MessageContextSkills"
        }
      }
    },
    "MessageRequest": {
      "type": "object",
      "description": "A request formatted for the Watson Assistant service.",
      "properties": {
        "input": {
          "description": "An input object that includes the input text.",
          "$ref": "#/definitions/MessageInput"
        },
        "context": {
          "description": "State information for the conversation.",
          "$ref": "#/definitions/MessageContext"
        }
      },
      "example": {
        "input": {
          "message_type": "text",
          "text": "Hello.  Got a second for a question?",
          "options": {
            "alternate_intents": true,
            "debug": true
          }
        },
        "context": {
          "global": {
            "system": {
              "user_id": "my_user_id"
            }
          }
        }
      }
    },
    "DialogLogMessage": {
      "type": "object",
      "description": "Dialog log message details.",
      "properties": {
        "level": {
          "type": "string",
          "description": "The severity of the log message.",
          "enum": [
            "info",
            "error",
            "warn"
          ]
        },
        "message": {
          "type": "string",
          "description": "The text of the log message."
        }
      },
      "required": [
        "level",
        "message"
      ]
    },
    "DialogRuntimeResponseTypeText": {
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the response."
        }
      }
    },
    "DialogRuntimeResponseTypePause": {
      "properties": {
        "time": {
          "type": "integer",
          "description": "How long to pause, in milliseconds."
        },
        "typing": {
          "type": "boolean",
          "description": "Whether to send a \"user is typing\" event during the pause."
        }
      }
    },
    "DialogRuntimeResponseTypeImage": {
      "properties": {
        "source": {
          "type": "string",
          "description": "The URL of the image."
        },
        "title": {
          "type": "string",
          "description": "The title to show before the response."
        },
        "description": {
          "type": "string",
          "description": "The description to show with the the response."
        }
      }
    },
    "DialogNodeOutputOptionsElementValue": {
      "properties": {
        "input": {
          "$ref": "#/definitions/MessageInput"
        }
      },
      "description": "An object defining the message input to be sent to the assistant if the user selects the corresponding option."
    },
    "DialogNodeOutputOptionsElement": {
      "properties": {
        "label": {
          "type": "string",
          "description": "The user-facing label for the option."
        },
        "value": {
          "$ref": "#/definitions/DialogNodeOutputOptionsElementValue"
        }
      },
      "required": [
        "label",
        "value"
      ]
    },
    "DialogRuntimeResponseTypeOption": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The title or introductory text to show before the response."
        },
        "description": {
          "type": "string",
          "description": "The description to show with the the response."
        },
        "preference": {
          "type": "string",
          "description": "The preferred type of control to display.",
          "enum": [
            "dropdown",
            "button"
          ]
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DialogNodeOutputOptionsElement"
          },
          "description": "An array of objects describing the options from which the user can choose."
        }
      }
    },
    "DialogRuntimeResponseTypeConnectToAgent": {
      "properties": {
        "message_to_human_agent": {
          "type": "string",
          "description": "A message to be sent to the human agent who will be taking over the conversation."
        },
        "topic": {
          "type": "string",
          "readOnly": true,
          "description": "A label identifying the topic of the conversation, derived from the **user_label** property of the relevant node."
        }
      }
    },
    "DialogRuntimeResponseTypeSuggestion": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The title or introductory text to show before the response."
        },
        "suggestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DialogSuggestion"
          },
          "description": "An array of objects describing the possible matching dialog nodes from which the user can choose.\n\n**Note:** The **suggestions** property is part of the disambiguation feature, which is only available for Premium users."
        }
      }
    },
    "DialogSuggestion": {
      "properties": {
        "label": {
          "type": "string",
          "description": "The user-facing label for the disambiguation option. This label is taken from the **user_label** property of the corresponding dialog node."
        },
        "value": {
          "$ref": "#/definitions/DialogSuggestionValue"
        },
        "output": {
          "type": "object",
          "description": "The dialog output that will be returned from the Watson Assistant service if the user selects the corresponding option."
        }
      },
      "required": [
        "label",
        "value"
      ]
    },
    "DialogSuggestionValue": {
      "properties": {
        "input": {
          "$ref": "#/definitions/MessageInput"
        }
      },
      "description": "An object defining the message input to be sent to the assistant if the user selects the corresponding disambiguation option."
    },
    "DialogRuntimeResponseGeneric": {
      "allOf": [
        {
          "properties": {
            "response_type": {
              "type": "string",
              "enum": [
                "text",
                "pause",
                "image",
                "option",
                "connect_to_agent",
                "suggestion"
              ],
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel.\n\n**Note:** The **suggestion** response type is part of the disambiguation feature, which is only available for Premium users."
            }
          },
          "required": [
            "response_type"
          ]
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypeText"
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypePause"
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypeImage"
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypeOption"
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypeConnectToAgent"
        },
        {
          "$ref": "#/definitions/DialogRuntimeResponseTypeSuggestion"
        }
      ]
    },
    "DialogNodeAction": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the action."
        },
        "type": {
          "type": "string",
          "enum": [
            "client",
            "server",
            "web-action",
            "cloud-function"
          ],
          "default": "client",
          "description": "The type of action to invoke.",
          "x-alternate-name": "action_type"
        },
        "parameters": {
          "type": "object",
          "description": "A map of key/value pairs to be provided to the action."
        },
        "result_variable": {
          "type": "string",
          "description": "The location in the dialog context where the result of the action is stored."
        },
        "credentials": {
          "type": "string",
          "description": "The name of the context variable that the client application will use to pass in credentials for the action."
        }
      },
      "required": [
        "name",
        "result_variable"
      ]
    },
    "MessageOutputDebug": {
      "description": "Additional detailed information about a message response and how it was generated.",
      "properties": {
        "nodes_visited": {
          "type": "array",
          "description": "An array of objects containing detailed diagnostic information about the nodes that were triggered during processing of the input message. ",
          "items": {
            "type": "object",
            "title": "DialogNodesVisited",
            "properties": {
              "dialog_node": {
                "type": "string",
                "description": "A dialog node that was triggered during processing of the input message."
              },
              "title": {
                "type": "string",
                "description": "The title of the dialog node."
              },
              "conditions": {
                "type": "string",
                "description": "The conditions that trigger the dialog node."
              }
            }
          }
        },
        "log_messages": {
          "type": "array",
          "description": "An array of up to 50 messages logged with the request.",
          "items": {
            "$ref": "#/definitions/DialogLogMessage"
          }
        },
        "branch_exited": {
          "type": "boolean",
          "description": "Assistant sets this to true when this message response concludes or interrupts a dialog."
        },
        "branch_exited_reason": {
          "type": "string",
          "description": "When `branch_exited` is set to `true` by the Assistant, the `branch_exited_reason` specifies whether the dialog completed by itself or got interrupted.",
          "enum": [
            "completed",
            "fallback"
          ]
        }
      }
    },
    "MessageOutput": {
      "description": "Assistant output to be rendered or processed by the client.",
      "properties": {
        "generic": {
          "type": "array",
          "description": "Output intended for any channel. It is the responsibility of the client application to implement the supported response types.",
          "items": {
            "$ref": "#/definitions/DialogRuntimeResponseGeneric"
          }
        },
        "intents": {
          "description": "An array of intents recognized in the user input, sorted in descending order of confidence",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeIntent"
          }
        },
        "entities": {
          "description": "An array of entities identified in the user input",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeEntity"
          }
        },
        "actions": {
          "description": "An array of objects describing any actions requested by the dialog node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DialogNodeAction"
          }
        },
        "debug": {
          "$ref": "#/definitions/MessageOutputDebug"
        }
      }
    },
    "MessageResponse": {
      "description": "A response from the Watson Assistant service.",
      "properties": {
        "output": {
          "description": "Assistant output to be rendered or processed by the client.",
          "$ref": "#/definitions/MessageOutput"
        },
        "context": {
          "description": "The current session context. Included in the response if the `return_context` property of the message input was set to `true`.",
          "$ref": "#/definitions/MessageContext"
        }
      },
      "required": [
        "output"
      ]
    },
    "ErrorDetail": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Description of a specific constraint violation."
        },
        "path": {
          "type": "string",
          "description": "The location of the constraint violation."
        }
      },
      "required": [
        "message"
      ]
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "type": "string",
          "description": "General description of an error."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "description": "Collection of specific constraint violations associated with the error."
        },
        "code": {
          "type": "integer",
          "description": "HTTP status code for the error response."
        }
      },
      "required": [
        "error",
        "code"
      ]
    },
    "SessionResponse": {
      "properties": {
        "session_id": {
          "type": "string",
          "description": "The session ID."
        }
      },
      "required": [
        "session_id"
      ]
    }
  }
}